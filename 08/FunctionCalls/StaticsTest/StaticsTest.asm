// Bootstrap Code
@256
D=A
@SP
M=D
// Calling Sys.init with 0 args
@null$return-address0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pushing LCL segment
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushing ARG segment
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushing THIS segment
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushing THAT segment
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
// label return-address0 
(null$return-address0)
// End Call
// function Class1.set
(Class1.set)
// push argument 0 
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop static 0 
@SP
M=M-1
@Class1.0
D=A
D=D+M
@address
M=D
@SP
A=M
D=M
@address
A=M
M=D
// push argument 1 
@1
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop static 1 
@SP
M=M-1
@Class1.1
D=A
D=D+M
@address
M=D
@SP
A=M
D=M
@address
A=M
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// Return
@LCL
D=M
@FRAME
M=D
@5
D=A
@FRAME
D=M-D
A=D
D=M
@RET
M=D
// pop argument 0 
@SP
M=M-1
@0
D=A
@ARG
D=D+M
@address
M=D
@SP
A=M
D=M
@address
A=M
M=D
@ARG
D=M+1
@SP
M=D
@1
D=A
@FRAME
D=M-D
A=D
D=M
@THAT
M=D
@2
D=A
@FRAME
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@FRAME
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@FRAME
D=M-D
A=D
D=M
@LCL
M=D
@RET
A=M
0;JMP
// function Class1.get
(Class1.get)
// push static 0 
@Class1.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 1 
@Class1.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
(UPDATESP0)
@SP
M=M+1
// Return
@LCL
D=M
@FRAME
M=D
@5
D=A
@FRAME
D=M-D
A=D
D=M
@RET
M=D
// pop argument 0 
@SP
M=M-1
@0
D=A
@ARG
D=D+M
@address
M=D
@SP
A=M
D=M
@address
A=M
M=D
@ARG
D=M+1
@SP
M=D
@1
D=A
@FRAME
D=M-D
A=D
D=M
@THAT
M=D
@2
D=A
@FRAME
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@FRAME
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@FRAME
D=M-D
A=D
D=M
@LCL
M=D
@RET
A=M
0;JMP
// function Class2.set
(Class2.set)
// push argument 0 
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop static 0 
@SP
M=M-1
@Class2.0
D=A
D=D+M
@address
M=D
@SP
A=M
D=M
@address
A=M
M=D
// push argument 1 
@1
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop static 1 
@SP
M=M-1
@Class2.1
D=A
D=D+M
@address
M=D
@SP
A=M
D=M
@address
A=M
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// Return
@LCL
D=M
@FRAME
M=D
@5
D=A
@FRAME
D=M-D
A=D
D=M
@RET
M=D
// pop argument 0 
@SP
M=M-1
@0
D=A
@ARG
D=D+M
@address
M=D
@SP
A=M
D=M
@address
A=M
M=D
@ARG
D=M+1
@SP
M=D
@1
D=A
@FRAME
D=M-D
A=D
D=M
@THAT
M=D
@2
D=A
@FRAME
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@FRAME
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@FRAME
D=M-D
A=D
D=M
@LCL
M=D
@RET
A=M
0;JMP
// function Class2.get
(Class2.get)
// push static 0 
@Class2.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 1 
@Class2.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
(UPDATESP1)
@SP
M=M+1
// Return
@LCL
D=M
@FRAME
M=D
@5
D=A
@FRAME
D=M-D
A=D
D=M
@RET
M=D
// pop argument 0 
@SP
M=M-1
@0
D=A
@ARG
D=D+M
@address
M=D
@SP
A=M
D=M
@address
A=M
M=D
@ARG
D=M+1
@SP
M=D
@1
D=A
@FRAME
D=M-D
A=D
D=M
@THAT
M=D
@2
D=A
@FRAME
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@FRAME
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@FRAME
D=M-D
A=D
D=M
@LCL
M=D
@RET
A=M
0;JMP
// function Sys.init
(Sys.init)
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 8 
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// Calling Class1.set with 2 args
@Sys.init$return-address1
D=A
@SP
A=M
M=D
@SP
M=M+1
// pushing LCL segment
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushing ARG segment
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushing THIS segment
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushing THAT segment
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class1.set
0;JMP
// label return-address1 
(Sys.init$return-address1)
// End Call
// pop temp 0 
@SP
M=M-1
@0
D=A
@5
D=D+A
@address
M=D
@SP
A=M
D=M
@address
A=M
M=D
// push constant 23 
@23
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 15 
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// Calling Class2.set with 2 args
@Sys.init$return-address2
D=A
@SP
A=M
M=D
@SP
M=M+1
// pushing LCL segment
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushing ARG segment
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushing THIS segment
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushing THAT segment
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class2.set
0;JMP
// label return-address2 
(Sys.init$return-address2)
// End Call
// pop temp 0 
@SP
M=M-1
@0
D=A
@5
D=D+A
@address
M=D
@SP
A=M
D=M
@address
A=M
M=D
// Calling Class1.get with 0 args
@Sys.init$return-address3
D=A
@SP
A=M
M=D
@SP
M=M+1
// pushing LCL segment
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushing ARG segment
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushing THIS segment
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushing THAT segment
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class1.get
0;JMP
// label return-address3 
(Sys.init$return-address3)
// End Call
// Calling Class2.get with 0 args
@Sys.init$return-address4
D=A
@SP
A=M
M=D
@SP
M=M+1
// pushing LCL segment
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushing ARG segment
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushing THIS segment
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// pushing THAT segment
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class2.get
0;JMP
// label return-address4 
(Sys.init$return-address4)
// End Call
// label WHILE 
(Sys.init$WHILE)
// goto WHILE 
@Sys.init$WHILE
0;JMP
