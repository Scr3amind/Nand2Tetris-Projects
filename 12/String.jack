// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength = 0) {
            let str = Array.new(1);
        }
        else {
            let str = Array.new(maxLength);
        }
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int value;
        var int counter;
        var int currentDigit;
        var bool isNegative;
        
        let counter = 0;

        if(str[0] = 45) {
            let isNegative = true;
            let counter = 1;
        }
        else {
            let isNegative = false;
        }

        while(counter < length) {
            let currentDigit = str[counter] - 48;
            let value = (value * 10) + currentDigit;
            let counter = counter + 1;
        }
        
        if(isNegative) {
            let value = -value;
        }

        return value;
    }


    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit;
        var int valDivided;
        var int currentChar;
        
        let valDivided = val / 10;
        let lastDigit = val - (valDivided * 10);
        let currentChar = Math.abs(lastDigit) + 48;
        
        if(Math.abs(val) < 10) {
            let length = 0;
            if(val < 0) {
                do appendChar(45);
            }
            do appendChar(currentChar);
            return;
        }
        else {
            do setInt(valDivided);
            do appendChar(currentChar);
        }
        return;
    }


    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
